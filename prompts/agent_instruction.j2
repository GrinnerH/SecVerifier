# VULNERABILITY REPRODUCTION TASK: {{ instance_id }}

## OVERVIEW
Your task is to reproduce, exploit, and fix vulnerability {{ instance_id }} by following a structured three-phase process.

Each phase requires specific deliverables that must be completed before proceeding:

## PHASE 1: Build
- Primary Responsibility: Build the code repository already cloned in {{ work_dir }}
- Key Deliverables:
  - `/testcase/base_commit_hash` (required)
  - `/src/build.sh` (improved)
  - `/testcase/repo_changes.diff` (if changes made)
  - `/testcase/packages.txt` (if packages installed)

## PHASE 2: Exploit
- Primary Responsibility: Create proof-of-concept with triggerable exploit command
- Key Deliverables:
  - PoC artifacts under `/testcase` (required)
  - Working exploit command in `secb repro()` function (required)

## PHASE 3: Fix
- Primary Responsibility: Analyze and generate a unified patch file
- Key Deliverables:
  - `/testcase/model_patch.diff` (required)

**IMPORTANT: ALL THREE PHASES MUST BE COMPLETED TO FINISH THE TASK.
CHECK IF REQUIRED DELIVERABLES ARE CORRECTLY SAVED BEFORE MOVING TO THE NEXT PHASE.**

## REPOSITORY INFORMATION
<uploaded_files>
{{ work_dir }}
</uploaded_files>

**NOTE:** The code repository is already cloned in the {{ work_dir }} directory. You don't need to clone it again.
YOUR WORKSPACE DIRECTORY IS {{ work_dir }}. All of your work SHOULD be done in this directory. DO NOT CHANGE THE DIRECTORY.

- Repository location: {{ work_dir }}
- Base commit: `{{ base_commit }}`
- Build script to update: `/src/build.sh` (located outside code repository)

## VULNERABILITY DETAILS

<issue_description>
{{ bug_description }}
</issue_description>

## Candidate fix commits:

<candidate_fix_commits>
{{ candidate_fixes }}
</candidate_fix_commits>

**NOTE:** These commits may include unnecessary/unrelated changes.
**NOTE:** You have helper scripts: `/usr/local/bin/secb` and `/src/build.sh` for your convenience.
**NOTE:** RUN ONLY NECESSARY COMMANDS. Be careful with commands that can output too much information such as `git log`. Avoid running commands that produce excessive output to keep the interaction efficient.

## WORKFLOW INSTRUCTIONS

### PHASE 1: BUILD — Setting up the vulnerable environment
1. **Identify appropriate base commit**
   - Default: `{{ base_commit }}`
   - If a more suitable commit is identified:
     - Save hash to `/testcase/base_commit_hash`
     - Reset repo: `git reset --hard <commit_hash>`
   - Otherwise, use default and save to `/testcase/base_commit_hash`
   - **CRITICAL: Create `/testcase/base_commit_hash` before proceeding**

2. **Build and troubleshoot**
   - YOU SHOULD ALWAYS USE `secb build` TO BUILD THE PROJECT.
   - Build: `cd {{ work_dir }} && secb build`
   - For errors:
     - Focus on `error` messages only (ignore warnings)
     - Add suppression flags if necessary
     - Make minimal source code changes if required
   - If packages installed, list in `/testcase/packages.txt` (one per line)

3. **Improve build script (`/src/build.sh`)**
   - Make it standalone (remove undefined variables)
   - Remove fuzzer-related commands
   - Add `-j$(nproc)` to `make` commands
   - Add `-p` to `mkdir` commands
   - Keep only essential build commands
   - Remove test/reproduction commands
   - Place `make clean` before configure/make commands
   - For compiler options:
     - Preserve existing flags: `export CFLAGS="$CFLAGS -new_flag"`
     - Define exports before `./configure` or `cmake`
   - For local scripts:
     - Check existence before running
     - Add execution permissions if needed
   - Note: `$SRC` and `$WORK` are predefined as `/src` and `/work`

4. **Record changes**
   - Save code changes: `cd {{ work_dir }} && git diff --no-color [BASE_COMMIT] > /testcase/repo_changes.diff`
   - Verify these files exist:
     - `/testcase/base_commit_hash`
     - `/testcase/repo_changes.diff` (if changes made)
     - `/testcase/packages.txt` (if packages installed)
     - `/src/build.sh` (updated)

#### Troubleshooting Build Issues
- For C++17 errors: Add `-std=c++14` to CFLAGS/CXXFLAGS
- For missing type specifiers: Add appropriate type declarations
- For function argument errors: Identify and replace problematic functions
- For function overloading errors: Add `-D_GNU_SOURCE` to compiler flags
- **DO NOT DISABLE SANITIZER options** — they're essential for bug detection

### PHASE 2: EXPLOIT — Creating proof-of-concept
1. **Analyze vulnerability**
   - Review description and code to locate vulnerable components

2. **Develop proof-of-concept**
   - Extract existing PoC from bug description, or
   - Create Python script in `/testcase` to trigger vulnerability
   - Verify binaries are available under {{ work_dir }}

3. **Test exploit**
   - Use absolute paths in commands
   - Verify exploit triggers the same sanitizer error described in bug report

4. **Implement repro function**
   - Edit `/usr/local/bin/secb` script
   - Complete ONLY the `repro()` function with working exploit
   - Verify with `secb repro` — output should show same sanitizer error

#### Exploit Tips
- Always use `secb build` for consistent environment
- Choose most relevant PoC if multiple options exist
- Success = triggering same sanitizer error as bug report
- Use `wget --no-check-certificate` for downloading code
- DO NOT modify any part of `/usr/local/bin/secb` except `repro()` function

### PHASE 3: FIX — Analyzing and fixing vulnerability
1. **Understand root cause**
   - Identify files needing fixes

2. **Review fix commits** (if provided)
   - Examine with `git show <commit_hash>`
   - Select most relevant changes
   - Focus on changes related to vulnerable files

3. **Create fix**
   - If no fix commits, manually implement fix based on analysis
   - Make minimal changes to fix vulnerability without harming functionality

4. **Generate patch**
   - Stage changes: `git add <changed_file_path>`
   - Create patch: `git diff --cached --no-color > /testcase/model_patch.diff`
   - Review patch — include ONLY necessary changes
   - Remove modifications to testing, documentation, or example files

5. **Validate fix**
   - Reset to base commit: `git reset --hard <base_commit_hash>`
   - Check format: `git apply --check /testcase/model_patch.diff`
   - Apply and build: `secb patch` then `secb build`
   - Test fix: `secb repro` — should show NO sanitizer errors and exit with code 0

#### Fix Requirements
- Patch must be as concise as possible while completely fixing vulnerability
- Output of `secb repro` must NOT contain ANY sanitizer errors
- Maintain original code functionality
- Verify `/testcase/model_patch.diff` exists with correct content

## COORDINATION INSTRUCTIONS
1. **ANALYZE FIRST:** Understand the vulnerability thoroughly before starting work
2. **PLAN YOUR APPROACH:** Break down tasks for each phase
3. **DELEGATE APPROPRIATELY:** Assign tasks to specialized agents based on capabilities
4. **TRACK PROGRESS:** Ensure each phase is fully completed before proceeding
5. **VERIFY DELIVERABLES:** Double-check all required files are correctly generated

**IMPORTANT: You can only complete this task after successfully finishing all three phases.**
